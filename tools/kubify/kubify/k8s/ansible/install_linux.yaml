- name: Install required Kubify tools & deps on Debian (or Ubuntu, WSL2, .. for workstation or cicd)
  # hosts: all
  hosts: localhost
  vars:
    local_bin: /usr/local/bin
    kubetail_url: https://raw.githubusercontent.com/johanhaleby/kubetail/master/kubetail
    kubesec_version: 0.9.2
    skaffold_version: 1.21.0
    kubecfg_version: 0.18.0
    helm_version: 3.5.3
    helmfile_version: 0.138.7
    kind_version: 0.10.0
    kubesec_url: https://github.com/shyiko/kubesec/releases/download/{{ kubesec_version }}/kubesec-{{ kubesec_version }}-linux-amd64
    skaffold_url: https://storage.googleapis.com/skaffold/releases/v{{ skaffold_version }}/skaffold-linux-amd64
    kubecfg_url: https://github.com/bitnami/kubecfg/releases/download/v{{ kubecfg_version }}/kubecfg-linux-amd64
    helm_url: https://get.helm.sh/helm-v{{ helm_version }}-linux-amd64.tar.gz
    helmfile_url: https://github.com/roboll/helmfile/releases/download/v{{ helmfile_version }}/helmfile_linux_amd64
    minikube_url: https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
    kubectx_url: https://raw.githubusercontent.com/ahmetb/kubectx/master/kubectx
    kubens_url: https://raw.githubusercontent.com/ahmetb/kubectx/master/kubens
    kind_url: https://github.com/kubernetes-sigs/kind/releases/download/v{{ kind_version }}/kind-linux-amd64

    apt_packages:
      - python3-setuptools
      - python3-pip
      - jq
      # TODO: automte this: only if docker is not installed, but never on WSL2, for now commenting (make sure docker-ce is installed on CICD Dockerfile in the meantime) .... for now I am commenting docker-ce dependancy as a workaround (until I automate this flow)
      # NOTE: on WSL2: you must first: enable WSL1, install WSL2, upgrade to WSL2, Install Ubuntu for Windows from Microsoft, open Ubuntu for Windows, make sure it's upgraded to WSL2, make sure install Docker Desktop (and that will install docker into that WSL2 Debian distro mapped to host Docker Desktop and host Kubernetes on the Windows side)
      # - docker-ce
      - kubectl
      - socat
      # for timeout command on delete
      - coreutils
      - npm
      # just in case IDEs are putting extra characters on Windows when saving files
      - dos2unix
      - wget
      - curl
      - dnsmasq
      # comment docker-ce for WSL2 support (TODO: fix this edge case)
      - docker-ce
      - networkmanager

    pip_packages:
      - yq
      - awscli
      - jsonnet
      - jmespath
      - pyjwt

    node_packages:
      - json-diff

    get_url_downloads:
      - {'bin': 'kubetail', 'url': '{{ kubetail_url }}'}
      - {'bin': 'kubesec', 'url': '{{ kubesec_url }}'}
      - {'bin': 'skaffold', 'url': '{{ skaffold_url }}'}
      - {'bin': 'kubecfg', 'url': '{{ kubecfg_url }}' }
      - {'bin': 'kubectx', 'url': '{{ kubectx_url }}' }
      - {'bin': 'kubens', 'url': '{{ kubens_url }}' }
      - {'bin': 'helmfile', 'url': '{{ helmfile_url }}'}
      - {'bin': 'minikube', 'url': '{{ minikube_url }}'}

    unarchive_downloads:
      - {'bin': 'helm', 'url': '{{ helm_url }}'}

  pre_tasks:
   - name: Check OS version
     fail:
       msg: "Ubuntu 18 or Mint 19 supported only at this time"
     when: ansible_os_family != "Debian"

  tasks:
################################################################################
# DOCKER
################################################################################
    - name: docker - add key to apt
      become: yes
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: docker - verify gpg key
      become: yes
      apt_key:
        id: "0EBFCD88"
        state: present

    - name: "docker - add docker apt repository"
      become: yes
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"
        state: present

################################################################################
# KUBERNETES
################################################################################
    - name: kubernetes - get apt_key
      become: yes
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: kubernetes - add apt repo
      become: yes
      apt_repository:
        repo: "deb https://apt.kubernetes.io/ kubernetes-xenial main"
        state: present

    - name: check dir
      stat:
        path: "{{ local_bin }}"
      register: local_bin_exists

    - name: create local bin dir
      become: yes
      file:
        path: "{{ local_bin }}"
        state: directory
      when: ! local_bin_exists.stat.exists

    - name: install apps via url
      become: yes
      get_url:
        url: "{{ item.url }}"
        dest: "{{ local_bin }}/{{ item.bin }}"
        mode: 0755
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
      with_items: "{{ get_url_downloads }}"

    - name: untar helm files
      unarchive:
        src: "{{ helm_url }}"
        dest: "/tmp"
        remote_src: yes
        mode: 0755

    - name: copy helm to PATH
      become: yes
      copy:
        src: /tmp/linux-amd64/{{ item }}
        dest: /usr/local/bin
        remote_src: yes
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        mode: 0755
      with_items:
        - helm


################################################################################
# Package Managers
################################################################################
    - name: install via apt
      become: yes
      apt:
        name: "{{ apt_packages }}"
        update_cache: yes
        state: present

    - name: install via pip
      become: yes
      pip:
        name: "{{ pip_packages }}"
        executable: pip3

    - name: install via npm
      become: yes
      npm:
        name: "{{ item }}"
        global: "yes"
        executable: npm
      with_items: "{{ node_packages }}"


################################################################################
# Misc
################################################################################
    - name: add user to docker group
      become: yes
      user:
        append: yes
        user: "{{ ansible_user_id }}"
        groups: docker

################################################################################
# dns setup
#
# This portion requires NetworkManager to handling
################################################################################

    - name: check dnsmasq location - Linux
      stat:
        path: /etc/NetworkManager/dnsmasq.d
      register: dnsmasq_linux_is_in_network_manager

    - set_fact:
        dir_dnsmasq_linux: "{{ '/etc/NetworkManager/dnsmasq.d' if dnsmasq_linux_is_in_network_manager.stat.exists else '/etc/dnsmasq.d' }}"

    - name: "check {{ dir_dnsmasq_linux }}/NetworkManager.conf"
      stat:
        path: "{{ dir_dnsmasq_linux }}/NetworkManager.conf"
      register: nm_conf

    - name: disable systemd-resolved
      become: yes
      systemd:
        name: systemd-resolved
        state: stopped
        enabled: no

    - name: set dnsmasq as default dns in NetworkManager
      become: yes
      lineinfile:
        path: "{{ dir_dnsmasq_linux }}/NetworkManager.conf"
        regexp: 'dns*'
        insertafter: '\[main\]'
        line: "dns=dnsmasq"
      when: nm_conf.stat.exists
      register: dnsmasq_update

    - name: restart NetworkManager
      become: yes
      systemd:
        name: NetworkManager
        state: restarted
      when: dnsmasq_update.changed
      register: nm_restart
      ignore_errors: True

    # This tries to open an internet connection for up to 30 seconds before failure.
    - name: wait for network connection to come back up
      wait_for:
        host: 8.8.8.8
        port: 53
        timeout: 30
        msg: |
          "Waiting for (up to 30s) for Internet to come back up. Please check"
          "README.md for troubleshooting steps if you see this"
      when: nm_restart.changed

    - name: Closing thoughts
      debug:
        msg: |
          - "**********************************************************"
          - "**********************************************************"
          - ""
          - "Your Network Connection has restarted so there may be a slight"
          - "disruption"
          - ""
          - "DOCKER:"
          - ""
          - "IN ORDER FOR YOUR USER TO HAVE DOCKER GROUPS PERMISSION,"
          - "YOU MUST LOG OFF AND LOG BACK INTO YOUR MACHINE."
          - ""
          - ""
          - "You will need to configure your $PATH to use kubify!"
          - "Add to your shell RC file"
          - "export KUBIFY_BIN=/path/to/kubify/tools/kubify/cli/"
          - "export PATH=$PATH:$KUBIFY_BIN"
          - ""
          - "An alternative is to create a symlink!"
          - "sudo ln -sf /path/to/kubify/tools/kubify/cli/kubify /usr/local/bin/kubify"
          - ""
          - "**********************************************************"
          - "**********************************************************"
