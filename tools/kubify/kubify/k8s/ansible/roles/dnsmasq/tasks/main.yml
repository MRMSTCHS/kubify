---

- name: check dnsmasq location - Linux (ESP: comprobar la ubicación de dnsmasq - Linux)
  stat:
    path: /etc/NetworkManager/dnsmasq.d
  register: dnsmasq_linux_is_in_network_manager

- set_fact:
    dir_dnsmasq_linux: "{{ '/etc/NetworkManager/dnsmasq.d' if dnsmasq_linux_is_in_network_manager.stat.exists else '/etc/dnsmasq.d' }}"

- set_fact:
    dir_dnsmasq: "{{ '/usr/local/etc' if ansible_os_family == 'Darwin' else dir_dnsmasq_linux }}"
    file_dnsmasq: "{{ 'dnsmasq.conf' if ansible_os_family == 'Darwin' else 'kubify.conf' }}"

# TODO: what about when there is no networkmanager, make sure all edge cases are tested and stable..
# ESP: ¿Qué pasa cuando no hay un administrador de red, asegúrese de que todos los casos de borde estén probados y sean estables?

- name: create NetworkManager dnsmasq config for kubify (ESP: crear la configuración de NetworkManager dnsmasq para kubify)
  become: yes
  file:
    path: "{{ dir_dnsmasq }}/{{ file_dnsmasq }}"
    state: touch
  when: ansible_os_family == "Debian"

################################################################################
# This part is configured in `kubify install` for Linux
# ESP: Esta parte está configurada en `kubify install` para Linux
################################################################################
#TODO (more urgent for WSL2): Do we need the linux versions of these?
# ESP: TODO (más urgente para WSL2): ¿Necesitamos las versiones linux de estos?

- name: Add *.{{ local_domain }} resolver port (ESP: Agregar puerto de resolución *. {{Local_domain}})
  become: yes
  lineinfile:
    state: present
    line: port 5354
    create: yes
    dest: /etc/resolver/{{ local_domain }}
    owner: root
    group: wheel
  when: ansible_os_family == "Darwin"

- name: Add *.{{ local_domain }} resolver address (ESP: Agregar dirección de resolución de *. {{Local_domain}}
  become: yes
  lineinfile:
    state: present
    line: nameserver 127.0.0.1
    create: yes
    dest: /etc/resolver/{{ local_domain }}
    owner: root
    group: wheel
  when: ansible_os_family == "Darwin"

- name: Add listen address config (ESP: Agregar configuración de dirección de escucha)
  become: yes
  lineinfile:
    state: present
    line: listen-address=127.0.0.1
    create: yes
    dest: "{{ dir_dnsmasq }}/{{ file_dnsmasq }}"
    owner: root
    group: wheel
  when: ansible_os_family == "Darwin"

- name: Add listen port config (ESP: Agregar configuración de puerto de escucha)
  become: yes
  lineinfile:
    state: present
    line: port=5354
    create: yes
    dest: "{{ dir_dnsmasq }}/{{ file_dnsmasq }}"
    owner: root
    group: wheel
  when: ansible_os_family == "Darwin"
  #
################################################################################

- name: Remove stale resolver entries for *.{{ local_domain }} (ESP: Elimina las entradas obsoletas del solucionador para *. {{Local_domain}})
  become: yes
  lineinfile:
    state: absent
    regexp: ^address=/\.{{ local_domain | replace(".", "\.") }}/.*
    create: no
    dest: "{{ dir_dnsmasq }}/{{ file_dnsmasq }}"
  register: config_change_1

- name: Resolve *.{{ local_domain }} to Cluster IP (ESP: Resolver *. {{Local_domain}} a la IP del clúster)
  become: yes
  lineinfile:
    state: present
    line: address=/.{{ local_domain }}/{{ cluster_ip }}
    create: yes
    dest: "{{ dir_dnsmasq }}/{{ file_dnsmasq }}"
  register: config_change_2

- name: Get dnsmasq PID (ESP: Obtener dnsmasq PID)
  shell: "ps -ef | grep -v grep | grep /dnsmasq | awk '{print $2}'"
  register: running_processes
  when: ansible_os_family == "Darwin"

- name: Kill dnsmasq (ESP: Mata a dnsmasq)
  shell: "kill {{ item }}"
  become: yes
  with_items: "{{ running_processes.stdout_lines }}"
  when: ansible_os_family == "Darwin"

- name: Wait for dnsmasq to terminate (ESP: Espere a que termine dnsmasq)
  wait_for:
    path: "/proc/{{ item }}/status"
    state: absent
  with_items: "{{ running_processes.stdout_lines }}"
  ignore_errors: yes
  register: killed_processes
  when: ansible_os_family == "Darwin"

- name: Ensure dnsmasq is really killed (ESP: Asegúrese de que dnsmasq esté realmente eliminado) 
  become: yes
  shell: "kill -9 {{ item }}"
  with_items: "{{ killed_processes.results | select('failed') | map(attribute='item') | list }}"
  when: ansible_os_family == "Darwin"

- name: Restart dnsmasq as user (for running) (ESP: Reinicie dnsmasq como usuario (para ejecutar)) 
  become: no
  command: brew services restart dnsmasq
  when: ansible_os_family == "Darwin"

- name: Restart dnsmasq as sudo (to also enable start on boot) (ESP: Reinicie dnsmasq como sudo (para habilitar también el inicio en el arranque))
  become: yes
  command: brew services restart dnsmasq
  when: ansible_os_family == "Darwin"

- name: restart NetworkManager (dnsmasq) for Ubuntu (ESP: reinicie NetworkManager (dnsmasq) para Ubuntu)
  become: yes
  systemd:
    name: NetworkManager
    state: restarted
  register: dnsmasq_update
  when:
    - ansible_os_family == "Debian"
    - config_change_1.changed or config_change_2.changed

# This tries to open an internet connection for up to 30 seconds before failure.
# ESP: Esto intenta abrir una conexión a Internet por hasta 30 segundos antes de fallar.

- name: wait for network connection to come back up (ESP: espere a que vuelva la conexión de red)
  wait_for:
    host: 8.8.8.8
    port: 53
    timeout: 30
    msg: |
      "Waiting for (up to 30s) for Internet to come back up. Please check"
      "README.md for troubleshooting steps if you see this"
  when: dnsmasq_update.changed
